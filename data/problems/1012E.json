{
    "id": "1012E",
    "contest_id": 1012,
    "problem_letter": "E",
    "title": "E. Cycle sort",
    "statement": "You are given an array of n positive integers a_1, a_2, , a_n. You can perform the following operation any number of times: select several distinct indices i_1, i_2, , i_k (1  i_j  n) and move the number standing at the position i_1 to the position i_2, the number at the position i_2 to the position i_3, ..., the number at the position i_k to the position i_1. In other words, the operation cyclically shifts elements: i_1  i_2   i_k  i_1.\nFor example, if you have n=4, an array a_1=10, a_2=20, a_3=30, a_4=40, and you choose three indices i_1=2, i_2=1, i_3=4, then the resulting array would become a_1=20, a_2=40, a_3=30, a_4=10.\nYour goal is to make the array sorted in non-decreasing order with the minimum number of operations. The additional constraint is that the sum of cycle lengths over all operations should be less than or equal to a number s. If it's impossible to sort the array while satisfying that constraint, your solution should report that as well.\nThe first line of the input contains two integers n and s (1  n  200\\,000, 0  s  200\\,000)—the number of elements in the array and the upper bound on the sum of cycle lengths.\nThe next line contains n integers a_1, a_2, , a_n—elements of the array (1  a_i  10^9).\nIf it's impossible to sort the array using cycles of total length not exceeding s, print a single number \"-1\" (quotes for clarity).\nOtherwise, print a single number q— the minimum number of operations required to sort the array.\nOn the next 2  q lines print descriptions of operations in the order they are applied to the array. The description of i-th operation begins with a single line containing one integer k (1  k  n)—the length of the cycle (that is, the number of selected indices). The next line should contain k distinct integers i_1, i_2, , i_k (1  i_j  n)—the indices of the cycle.\nThe sum of lengths of these cycles should be less than or equal to s, and the array should be sorted after applying these q operations.\nIf there are several possible answers with the optimal q, print any of them.\nIn the first example, it's also possible to sort the array with two operations of total length 5: first apply the cycle 1  4  1 (of length 2), then apply the cycle 2  3  5  2 (of length 3). However, it would be wrong answer as you're asked to use the minimal possible number of operations, which is 1 in that case.\nIn the second example, it's possible to the sort the array with two cycles of total length 4 (1  2  1 and 3  4  3). However, it's impossible to achieve the same using shorter cycles, which is required by s=3.\nIn the third example, the array is already sorted, so no operations are needed. Total length of empty set of cycles is considered to be zero.",
    "input": "The first line of the input contains two integers n and s (1 ≤q n ≤q 200\\,000, 0 ≤q s ≤q 200\\,000)—the number of elements in the array and the upper bound on the sum of cycle lengths.",
    "output": "If it's impossible to sort the array using cycles of total length not exceeding $$$s$$$, print a single number \"-1\" (quotes for clarity).",
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "tags": [
        "dsu",
        "math",
        "*3100"
    ]
}